# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: ["heo"]
  #pull_request:
  #branches: ["develop"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "adopt"
          #        github-token: ${{ secrets.GIT_TOKEN }}
          cache: maven
          check-for-updates: "true"
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}

      #- name: Copy files to EC2
      #  run: |
      #    scp -r -o StrictHostKeyChecking=no ./* ubuntu@${{ secrets.HOST }}:/home/ubuntu/market
      # 변경된 파일만 복사
      - name: Copy changed files to EC2 using rsync
        run: |
          rsync -avz --delete --exclude="node_modules" --exclude="target" -e "ssh -o StrictHostKeyChecking=no" ./ ubuntu@${{ secrets.HOST }}:/home/ubuntu/market
        shell: bash

      #    - name: Change Directory
      #      run: cd back

      - name: List files
        run: ls -la
      #    - name: Build with Maven
      #      run: mvn -B package --file pom.xml

      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
      #    - name: Update dependency graph
      #      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
      - name: Add user in the Docker group
        run: |
          sudo usermod -aG docker $USER

      - name: reload docker session
        run: |
          sudo chmod 666 /var/run/docker.sock

      - name: SSH into EC2 and run Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
            # 포트 6379 사용 중인지 확인하고, 사용 중이면 호스트의 Redis 서버 중지
            if sudo lsof -i :6379; then
              echo "6379 포트가 사용 중입니다. 호스트의 Redis 서버를 중지합니다."
              sudo systemctl stop redis
            else
              echo "6379 포트가 사용 중이 아닙니다. Docker Redis를 실행합니다."
            fi
            
            # Docker Compose로 Redis 실행
            cd /home/ubuntu/market
            docker-compose down
            docker-compose up -d --build
          EOF
